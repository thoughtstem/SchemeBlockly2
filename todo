Refactor into Purescript
  > Define shape/drawing library for Lisp
    > The basics are there, but need a crazy refactorign of some sort:
      > What is the primitive value for a shape?
      > I don't want to add another primitive to the language -- e.g. another LispVal
        > I want the language to be extensible.
           > But I want the basic parsing and interpretation semantics to be implemented in the core Lisp.purs 
           > But I want the shape functions and primitive values (and how they're rendered?) to be defined in files tha extend the base language...  Do we shove everything into LispVal Strings and parse them later?
           > Do we add another primitive that can wrap up a record type?
           > Do we parameterize the LispVal type?
         

    > Render to canvas when fully evaluated
    > Impl above and beside

    

    > Modularize this lisp libs, later might want to:
      > ship to unity for execution in voxl
      > ship to ltm for execution on mc server

  > Support more Scheme (function defs?  Ifs?  Lists....)
    * Use existing purescript lisp interpreter?



  > Layout of the page sucks
    


  > Working, but typing in ACE is unbearably slow...
    Might be a bit better now.
    Bigger fix would be to use tree diffing to map between AST nodes on each change, and only change the ones that have been edited



  > Blockly features to fix  
    > Parameter mutation is broken    
    > Input/output restrictions on blocks
 

  > Allow whitespace/padding in scheme editor
    > Don't reset with changes to blockly

  > Allow free positioning in blockly
    > Don't reset x and y positions with changes to scheme
    > Also don't clear shadow blocks





  > generate new function definitions from code (define ...) -> Infer type, Place in toolbox

  > Use function definitions to 
     > set blockly toolbox
       > Categorize by output type and input type
    
     > tell blockly what the inputs and outputs are
       > via mutation 
    

 






collapsable blockly blocks
  > Factor functions into different "files"  Or otherwise be able to hide things...

saving/loading code

bug: mutating disconnects blocks

bug: extra scheme inputs not passed to javascript function

make prettier layout

auto code-tidying in text editor
  folding

more htdp functions implemented
  > Be able to switch between function defs and implementations...

figure out animation framework

type inference
  polymorphic blocks

catch infinite loops in live coding

auto-generate problems.
Auto-generate code.


Bigger goals:

* Work with WeScheme people?  Grant?
  * Make Scratch clone
  * Make new curriculum for kids

* Integrate with CodeSpells
* Integrate with LearnToMod
* Integrate with Vox-L



Research Ideas:

* Pictures that draw pictures
